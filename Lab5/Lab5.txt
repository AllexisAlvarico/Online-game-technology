Transmission control protocol header

Q1:
-------------------------------------------------------------------------
|	Source port number	|	Destination portnumber		|
|			Sequence Number					|					
|			Acknowledgement numaber				|
|	Data offset	|  Reserved  |	Contorl Flags	|  Window size	|
|	Checksum		|	Urgent pointer			| 
|			Optional Data					|
-------------------------------------------------------------------------


Source Port number: 50704
Destination portnumber: 8080
Sequence Number: 57
Acknowledgement numaber: 1
Data offset: 20 byte
Reserved: Not set
Control Flags: 0x018
Window size: 8211
Checksum: 0xb589
Urgent pointer: 0
Optional data: 54

Source Port number: Represent the sending device.
Destination portnumber: The communication endpoint for the receiving device.
Sequence Number: Message senders use squence numbers to mark the ordering of a group of message
Acknowledgement number: Both senders and receivers use the acknoledgement number field to communicate
the sequence numbers of message that are either recently received or expected to be sent.
Data offset: Stores the the total size of a TCP header in multiples of four bytes.
Reserved: TCP headers always has a value of zero. The total header size as multiple of four bytes,
which is important for efficiency of computer data processing.
Control Flags: There's set of six standard and three extended control flags - each an individual bit
representing on or off to manage data flow.
Window size: TCP senders uses a number, called window size. This allows the data to be regulated
on much data it can send to a receiver before requiring an acknowledgment in return. If the window
size is small the network data is unnecessarily slow. If the window size is larger it may result on
slow performance.
Checksum: This is the value inside of the TCP header is generated by the protocol sender as a 
mathematical technique to help the receiver detect messages tjay are corrupted or tampered with.
Urgent pointer: This is often set to zero and ignored, buy in conjunction with one of the control
flags, it can be used as a data offset to mark a subset of a message as requiring priority processing
Optional data: useage of optional TCP data include support for special acknowledgment and window
scaling algorithms.

Q2: 

-------------------------------------------------------------------------
|	Source port number	|	Destination portnumber		|
|	Length			|	Checksum			|					
-------------------------------------------------------------------------


Source Port number: 54915
Destination portnumber: 54915
Lenght: 271
Checksum: 0x4a7c unverified


Source Port number: Identifies the sender's port.
Destination portnumber: The destination UDP port number is the communication endpoint for the 
receiving device.
Lenght: Represents the total of size of each datagram, including both header and data.
Checksum: Allows receivers to cross-check incoming data for any corrupted bits of the message.

Q3:

Checksum: 0xa520
binary: 1010010100100000

I have no idea


Q4:

UDP is used more used in Live stream like twitch or Dlive
TCP is used more to for normal videos like in youtube


Q5:

Three-way Handshaking (Establishing connection)

|	CLIENT		|	Server		|	
Sends 'SYN' (seq = m)	->	Receives 'SYN'
Receives 'SYN' (seq = n) <-	Sends 'SYN' (seq = n)
Receives 'ACK' (ack = m+1) <-	Sends 'ACK' (ack = m+1)
Sends 'ACK' (ack= n+1)	->	Receives 'ACK' (ack = n+1)

Packet capture:

IP: 149.153.106.110
Dest: 149.153.106.152
Protocol: TCP
Seq: 40
ACK: 775
Win = 65664
Len: 0

IP: 149.153.106.110
Dest: 149.153.106.152
Protocol: TCP
Seq: 1500
ACK: 775
Win = 65664
Len: 1460

IP: 149.153.106.110
Dest: 149.153.106.152
Protocol: TCP
Seq: 2960
ACK: 775
Win = 65664
Len: 1460


Q6:

Four-way Teardown (Closing connection)
|	CLIENT		|	Server		|	
Send Fin (seq = p)	->	Receive Fin
Receive ACK		<-	Send ACK (ack = p+1)
Receive Fin		<-	Send Fin (seq = q)
Send ACK(ack = Q+1)	->	Recieve ACK

Packet capture:
I can't find it



